
1. What is Terraform, And why it is used ?

Terraform is an open-source software and it is used an infrasctructure as a code (IaC) tool, We can write logic to create resources in cloud. we can easily maintain,version,reuse and share the codes.
Terraform is a declarative language, It provides a morre accurate view of what is actually deployed when compared to the procedural language.
Terraform uses the HashiCorp Configuration Language (HCL), which is human-readable and declarative, making it easy to understand and use.

Terraform is widely used because it is in open source and it supports multiple clouds platforms to create resources.

For Ex: In AWS we can create resources in AWS by using Cloud Formation by writing YAML/JSON format. But it is bound to AWS services only. So in your org if a different cloud project came into your hands, u don't need to learn other cloud platform, instead u can use this terraform as it supports multi cloud platforms.


2. Advantages of Terraform ? 

1. Terraform is free and open source
2. It reduced the time to provision the infrastructure on cloud.
3. It uses simple commands and code which are easy to use and understand
4. It supports multiple providers (AWS,GCP,Azure)
5. Creates infrastructure safely and more efficiently with minimal time.

3. What are the main components of a Terraform configuration file?

In terraform we have component files to write code in multiple files to keep the code clean and reduce the impact of overall code, In terraform we keep component files with name as *.tf files.

We have 4 files
providers.tf, main.tf, variables.tf, output.tf

main.tf:
    * This is the central file where the core infrastructure logic is defined.
    * It integrates other .tf files and acts as the "brain" of the Terraform configuration.
variables.tf:
    * This file is used to declare variables, making the code dynamic and reusable.
    * These variables can be referenced in the main.tf file to avoid hardcoding values.
providers.tf:
    * This file specifies which cloud provider(s) or service(s) Terraform will interact with (e.g., AWS, Azure, GCP).
    * It informs Terraform about the plugins it needs to download and use.
outputs.tf:
    * This file is used to define output values, which display key information about the resources created by Terraform (e.g., instance IDs, IP addresses).
    * These outputs are helpful for debugging or passing data to other modules or tools.

	File Structure:

	├── main.tf        # Main logic for the infrastructure
	├── variables.tf   # Variable declarations
	├── providers.tf   # Provider configuration
	├── outputs.tf     # Outputs for created resources

4. What is State file ? 
In terraform state-file keeps the track of records which was created by terraform. 
If a resource is accidentally deleted or modified outside of Terraform, you can run terraform apply again, Terraform will compare the current state (as recorded in the state file) to the desired state defined in the configuration files, and it will recreate the resource if it finds discrepancies. 

It’s important to keep the state file safe and secure, especially when collaborating in teams, and consider using remote backends (like S3 with DynamoDB for locking) for storing the state file in shared environments.

Terraform destroy command also used this state file to remove everything defined in your configuration, based on the state file, by destroying the resources. It stores locally in terraform.tfstate file and this file was created whenever u run terraform apply command.

5. What Happens if you made changes to the resource from console ?

If you create an EC2 instance using Terraform and then make changes to that instance manually (via the UI or other means), running terraform apply will compare the current state (from the state file) with the desired state (defined in your Terraform configuration).

* Minor changes (like modifying tags or attributes that Terraform can update) will update the instance without replacing it.
* Major changes (like modifying attributes that require recreation) will result in the old instance being terminated and a new one being created.

6. Different types of states in Terraform ?

Local State: Stored locally, simple but not ideal for collaboration.
Remote State: Stored in external systems like AWS S3, GCS, Azure, or Terraform Cloud. Best for teams, collaboration, and large-scale infrastructure.
Workspace State: Isolated states within the same configuration, ideal for managing multiple environments.
Desired State : It Represents how the information to be present.

7. what is terraform.tfstatebackup file ? 

Terraform.tfstate.backup file is a backup of most recent version of our statefile (terraform.tfstate), and it also created automatically when u run terraform apply command.
It serves as a safety copy in case something goes wrong, allowing you to restore the state to its previous version.

8. what is the differnce between var.tf, terraform.tfvars and main.tf ?

When you create above three files and run a instance it will take priority as .tfvars > var.tf > main.tf

For example :

When u give instance_type as t2.large in .tfvars file and t2.medium in var.tf and in main.tf u give instance_type as var.instance_type.

it will create instance with instance_type as t2.large.

Buut when u give t2.micro in main.tf file it is hardcoded, so even u have instance type in var.tf and .tfvars file it will create instance with t2
.micro only.

9. What is Outputs in Terraform ? 

Outputs also a component in Terraform and it is used to display information after the resources are created, Such as IP Addresses , Resource Id’s.
You can give file name as whatever u want (my_outputs.tf , display.tf).

10. What is Modules ?

A module is nothing but a folder of terraform files, Here we can split the code into multiple files for better readability and re-used multiple Times.

Modules are categorized into two types:

Root Module : The Current directory of terraform files on which you are running commands.

Child Module : The Modules are taken from the root module to create a child module and add resource to it. We can call this module to the main module by using module “name” {
Source = "child path”
}

project/
├── main.tf          # Calls the module
├── variables.tf     # Defines variables for the root module
├── outputs.tf       # Outputs from the root module
├── modules/
│   └── ec2/
│       ├── main.tf  # Defines resources for the EC2 instance
│       ├── variables.tf  # Defines variables for the module
│       └── outputs.tf    # Outputs for the EC2 module

Modules name must be unique. Bcz it is used as a reference to the module and outputs.

EX: In real time we can take the ref from root module and create a child module and make changes. So once changes done in child module, this module will be called by root module and run the commands in root file.

11. What is terraform loops and ternary operators ?

A: As terraform is declarative language it don't have loops concept, so in terraform we can't repeat a peice of code, To overcome this we use meta-parameter called as COUNT.

	resource "aws_instance" "example" {
  	count         = 3  #It will create no of instances, based on the count number which we give. 
 	 ami           = "ami-0b7207e48d1b6c06f"
  	instance_type = "t2.micro"
	}
   * The ternary operator is a shorthand for a simple if-else condition. It works like this: condition ? true_value : false_value
	instance_type = var.environment == "production" ? "t2.large" : "t2.micro"

12. What is Remote Backend? 

A remote backend in terraform is to store the statefile securly on remote servers (oR) Services, 
and it enables collaboration among team members and ensuring the security and durability of your stored data.

13. What is State Locking ? 

It is a mechanism in terraform to prevent multiple users making concurrent modifications in the same state file. Which leads to corruption or inconsistency in infrstrcutor management.
It is particualry important while using remote backends as it ensure only one operation can modify the state file at any given time.

For ex: If two developers worked on same configuration and perform actions like terraform apply OR Terraform plan. it locks the statefile.
	* Developer A starts terraform apply, and the state file gets locked.
        * Developer B tries to run terraform plan at the same time. Since the state file is locked, Terraform will either wait or show an error.
        * After Developer A finishes, the lock is released, allowing Developer B to proceed.

14. What is Proviosioners and it's types ? 

Provisioners in Terraform allow you to execute scripts or run commands on a local machine or a remote machine during the creation or destruction of a resource. 
They are used for tasks like configuring infrastructure or deploying software that cannot be managed declaratively.

	There are two types of Provisioners:
	1. File Provisioner : Can be used to copies files or directories from local to remote machines.
				provisioner "file" {
				  source      = "script.sh"
				  destination = "/tmp/script.sh"
				}

	2. Remote-Exec Provisioner : Used to run scripts or commands on a remote machine over SSH (Linux) or WinRM (Windows) connections.

 				    provisioner "remote-exec" {
					  inline = [
					    "sudo apt-get update -y",
					    "sudo apt-get install nginx -y"
					  ]
					}
15. What are Workspaces in Terraform ?

Terraform workspaces allows to manage multiple instances of a single configuration, which can be useful for different environments.

Ex: In terraform if we create a resource, a state file was created, So if we modify the changes and re-run the config file terraform will update the existing resources and create new resources because they share the same state file.

To overcome this we use this Workspaces Concept, by using workspaces you can manage multiple environments from a single configuration keeping each environment's state separate and making it easy to deploy and manage resources in different environmnts.

Terraform Workspace files can be crated in this path : /home/ec2-user/Practise/terraform.tfstate.d/Dev

Terraform workspace new prod - Create workspace
Terraform workspace select prod - Switch to prod workspace
Terraform workspace list - To list all workspaces.
Terraform workspace delete prod - Delete the pros Workspace.

16. What is terraform import ?

Terraform import can be used to import the aws infrastrcutre to terraform by using import command.

ex : Terraform import aws_instance.imported_instance_name i-012343dbska


Terraform 


17. A Terraform apply fails due to a state file lock issue. How would you resolve it?

		This issue usually happens when another process is holding a lock on the state file. Here’s how I would troubleshoot and resolve it

		First we need to check which process or user is holding the lock. : terraform force-unlock -dry-run <LOCK_ID>

		Once we got the Lock id, We can unlock it by using : terraform force-unlock <LOCK_ID>.


18. Your Terraform deployment created resources in AWS, but some are not being deleted when destroying the infrastructure. What went wrong?

		Some resources may have lifecycle rules preventing deletion, like : 

		resource "aws_s3_bucket" "example" {
	  	bucket = "my-bucket"

  		lifecycle {
    		prevent_destroy = true
  		}
		}	

19. The Terraform execution is slow due to too many dependent modules. How can you optimize it?

		If your terraform execution is very slow, we can use parallelism to optimise the speed. By default this parallelism is set to 10, We can increase this by  using below command.
		terraform apply -parallelism=20
		If you want to test for Particular Module we can avoid apply the entire infrastructure and use target : terraform apply -target=module.ec2

20. Your Terraform deployment in a multi-cloud environment is facing latency issues. How would you optimize it?
		If your Terraform deployment in a multi-cloud environment is facing latency issues, you can optimize it by focusing on parallel execution, provider configurations, and network efficiency.
		Define separate provider configurations for each cloud (AWS, Azure, GCP) to avoid unnecessary dependencies.
	
		provider "aws" {
  		alias  = "aws_us"
 		region = "us-east-1"
		}

		provider "google" {
  		alias   = "gcp_eu"
  		region  = "europe-west1"
  		project = "my-gcp-project"
		}
		By increasing parallelism, reducing cross-cloud dependencies, optimizing provider configurations, and using efficient state management, 
		you can significantly reduce Terraform deployment latency in a multi-cloud environment.

21. How to Fetch Latest AMI dynamically without harcoding it on the code ?

    If you want to dynamically fetch the latest AMI (Amazon Machine Image) every time you deploy your infrastructure using Terraform,
    you use a data block to retrieve the AMI, and then refer to it in your aws_instance resource block.









